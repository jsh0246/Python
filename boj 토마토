import sys
input = sys.stdin.readline

from collections import deque

M, N = map(int, input().split())
tomatoes = [list(map(int, input().split())) for _ in range(N)]

dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

# unripe_tomatoes = 0
# for i in tomatoes:
#     for j in i:
#         if j == 0:
#             unripe_tomatoes += 1
# 짧게 쓰는 방법
unripe_tomatoes = sum([i.count(0) for i in tomatoes])

# ripe_tomatoes = []
# for i in range(0, N):
#     for j in range(0, M):
#         if tomatoes[i][j] == 1:
#             ripe_tomatoes.append([i, j])
# 짧게 쓰는 방법
ripe_tomatoes = [[i, j] for i in range(0, N) for j in range(0, M) if tomatoes[i][j] == 1]
#print(ripe_tomatoes)

q = deque()
[q.append(i) for i in ripe_tomatoes]
#(q.append(i) for i in ripe_tomatoes)
# 짧게 써보고 있는데 위 두줄의 차이는? 두번째 줄은 결과 올바르게 안나옴, ()=>제너레이터? []=>?
# for i in ripe_tomatoes:
#     q.append(i)

#_max = -1
while q:
    v = q.popleft()

    for i in range(4):
        nx = v[0] + dx[i]
        ny = v[1] + dy[i]

        if 0<=nx<N and 0<=ny<M:
            if tomatoes[nx][ny] == 0:
                tomatoes[nx][ny] = tomatoes[v[0]][v[1]] + 1

                # while 바로 위에 _max와 이 줄을 활용하여 _max를 구하면 90퍼센트 후반에서 틀렸습니다 나옴, 왜?
                # _max = max(max(i) for i in tomatoes) 로 구하면 오류 안남
                # ====> while문 한번도 반복 안할수도 있어서 그런듯
                #_max = max(_max, tomatoes[v[0]][v[1]] + 1)
                
                unripe_tomatoes -= 1
                q.append([nx, ny])

_max = max(max(i) for i in tomatoes)

if unripe_tomatoes > 0:
    print(-1)
else :
    print(_max-1)

# for i in tomatoes:
#     for j in i:
#         if j == 0:
#             print(-1)
#             exit(0)

# print(_max-1)
# 줄이기 가능?
#[print(-1), exit(0), print(_max-1) for i in tomatoes for j in i if j == 0]

# 줄이기 vs 안줄이기 속도차이 있나요? 그냥 가독성이나 코드양 줄이기인가요?